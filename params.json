{
  "name": "Encryption",
  "tagline": "A simple wrapper for the OpenSSL Cipher library for Ruby and Rails applications. Distributed as a Gem through Rubygems.",
  "body": "Encryption\r\n==========\r\n[![Gem Version](https://badge.fury.io/rb/encryption.png)](http://badge.fury.io/rb/encryption)\r\n[![Code Climate](https://codeclimate.com/github/Itehnological/encryption.png)](https://codeclimate.com/github/Itehnological/encryption)\r\n[![Build Status](https://travis-ci.org/itay-grudev/encryption.png?branch=master)](https://travis-ci.org/itay-grudev/encryption)\r\n\r\nA simple to use wrapper of the Ruby OpenSSL Cipher library for Ruby and Rails applications.\r\nThis gem provides an easy to use interface for symmetrical and asymmetrical encryption using RSA.\r\n\r\nDocumentation\r\n-------------\r\nAdditional documentation and class reference can be found in the [Wiki section](https://github.com/itay-grudev/encryption/wiki) of the repository.\r\n\r\nInstallation\r\n------------\r\nInstall the gem\r\n```bash\r\ngem install encryption\r\n```\r\nor add it to your `Gemfile`\r\n```ruby\r\ngem 'encryption'\r\n```\r\n\r\n## Symmetric encryption\r\n\r\n### Using the global instance of the Encryption class\r\n\r\nA simple example of how this gem works:\r\n\r\n```ruby\r\nEncryption.key = 'A very long encryption key'\r\ndata = 'secret data'\r\nencrypted_str = Encryption.encrypt( data )\r\nEncryption.decrypt( encrypted_str ) == data # true\r\n```\r\n\r\n### Using your own instance of the Encryption class\r\n\r\nIf you need a separate instance with custom settings, different than the global Encryption instance, here is how you can do it:\r\n```ruby\r\nencryptor = Encryption::Symmetric.new\r\nencryptor.key = 'A very long encryption key'\r\ndata = 'secret data'\r\nencrypted_str = encryptor.encrypt( data )\r\nencryptor.decrypt( encrypted_str ) == data # true\r\n```\r\n\r\n### Configuration\r\n\r\nFor symmetric encryption/decryption you need to set an encryption key. You can also optionally set an initialization vector and a cipher.\r\n\r\n`Encryption.key` - Your encryption key  \r\n`Encryption.iv # Optional` - Encryption initialization vector. Defaults to the character `\"\\0\"` _(Optional)_  \r\n`Encryption.cipher # Optional` - Your encryption algorithm. Defaults to `aes-256-cbc` _(Optional)_\r\n  \r\nRunning `openssl list-cipher-commands` in the terminal or calling `OpenSSL::Cipher.ciphers` in _Ruby_, which list all available ciphers.\r\n\r\nYou can configure both the global instance and a other instances with a _block_ like this:\r\n\r\n```ruby\r\nEncryption.config do |e|\r\n    e.key = 'Don't look!'\r\n    e.iv = 'This is probably the easiest way to use OpenSSL in Ruby'\r\n    e.cipher = 'camellia-128-ecb' # if you're feeling adventurous\r\nend\r\n  ```\r\n\r\n## Asymmetric encryption (public/private key encryption)\r\n\r\nThe `encryption` gem also provides a DSL for asymmetric encryption.\r\n\r\n### Generating keypair\r\n\r\n```ruby\r\nkeypair = Encryption::Keypair.new # Accepts two optional arguments: size = 2048, password = nil\r\nkeypair.public_key # Instance of Encryption::PublicKey\r\nkeypair.private_key # Instance of Encryption::PrivateKey\r\n# Or you can use this shorter version\r\npublic_key, private_key = Encryption::Keypair.generate( 2048 )\r\n\r\n# You can dump keys to string\r\nprivate_key.to_s\r\n\r\n# or export them to PEM format\r\nprivate_key.to_pem\r\n\r\n# and optionally encrypt them with a passphrase\r\nprivate_key.to_pem( 'passphrase' )\r\n```\r\n\r\n### `Encryption::PublicKey` and `Encryption::PrivateKey`\r\n\r\nBoth classes have the same methods:\r\n\r\n  ```ruby\r\n# Import an existing key\r\nEncryption::PrivateKey.new( filename[, password] ) # Import from file\r\nEncryption::PrivateKey.new( string[, password] ) # Import from string\r\n\r\n# Encrypt / Decrypt data\r\npublic_key = Encryption::PublicKey.new( 'existing key' )\r\npublic_key.encrypt( 'some secret data' )\r\npublic_key.decrypt( \"some encrypted data\" )\r\n```\r\n\r\n_Note: You can use both the public and the private key to encrypt or decrypt data._\r\n\r\n## Helpers\r\n\r\n### String helper\r\n\r\nThe gem adds the `encrypt` and `decrypt` methods to the `String` performing symmetric encryption. You can use them as follows:\r\n\r\n```ruby\r\n# With the global Encryption instance\r\n'Hello'.encrypt\r\n'Hello'.encrypt!\r\n'h3LL0'.decrypt\r\n'h3LL0'.decrypt!\r\n\r\n# With custom settings (and custom encryptor instance)\r\n'secret'.encrypt( key: 'encryption key', iv: 'initialization vector', cipher: 'encryption cipher', encode: true )\r\n# Note the encode option which will result in a base64 encoded string\r\n\r\n'encrypted data'.decrypt( encoded: true ) # Will decrypt a base64 encoded string\r\n\r\n# Or with a custom encryptor\r\nencryptor = Encryption::Symmetric.new\r\nencryptor.key = 'encryption key'\r\n'secret data'.encrypt( encryptor: encryptor )\r\n```\r\n\r\nLicense\r\n-------\r\nThis gem is distributed under The MIT License.\r\n\r\nAuthor\r\n------\r\nItay Grudev \\<itay(at)grudev...com\\>\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}