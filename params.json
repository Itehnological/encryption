{
  "name": "Encryption",
  "tagline": "A simple wrapper for the OpenSSL Cipher library for Ruby and Rails applications. Distributed as a Gem through Rubygems.",
  "body": "Encryption\r\n==========\r\n[![Gem Version](https://badge.fury.io/rb/encryption.png)](http://badge.fury.io/rb/encryption)\r\n[![Code Climate](https://codeclimate.com/github/Itehnological/encryption.png)](https://codeclimate.com/github/Itehnological/encryption)\r\n[![Build Status](https://travis-ci.org/itay-grudev/encryption.png?branch=master)](https://travis-ci.org/itay-grudev/encryption)\r\n\r\nA simple wrapper for the OpenSSL Cipher library for Ruby and Rails applications.\r\nThis gem provides you with an easy way to encrypt and decrypt any data using both symmetrical and asymmetrical algorithms.\r\n\r\nDocumentation\r\n-------------\r\nFull documentation can be found in the [Wiki section](https://github.com/itay-grudev/encryption/wiki) of the repo.\r\n\r\nInstallation\r\n------------\r\nRun this command\r\n```bash\r\ngem install encryption\r\n```\r\nor add this line to your `Gemfile`\r\n```ruby\r\ngem \"encryption\"\r\n```\r\n\r\nSymmetric encryption\r\n--------------------\r\n\r\n  Using a global instance of the Encryption class\r\n  -----------------------------------------------\r\n  A simple example of how the gem works:\r\n  ```ruby\r\nEncryption.key = \"Secretly yours,\\n very long encryption key\"\r\ndata = \"this is to stay secret\"\r\nencrypted_str = Encryption.encrypt(data)\r\nEncryption.decrypt(encrypted_str) == data # true\r\n  ```\r\n\r\n  Using own instance of the Encryption class\r\n  ------------------------------------------\r\n  Sometimes it is useful to use an own instance with custom settings, rather than the global Encryption instance. Here is how you can achieve it.\r\n  ```ruby\r\nencryptor = Encryption::Symmetric.new\r\nencryptor.key = \"Secretly yours,\\n very long encryption key\"\r\ndata = \"this is to stay secret\"\r\nencrypted_str = encryptor.encrypt(data)\r\nencryptor.decrypt(encrypted_str) == data # true\r\n  ```\r\n\r\n  Configuration\r\n  -------------\r\n  For symmetric encryption / decryption you need to set an encryption key. The rest of the settings are optional. Here is a list of all of them:  \r\n  `Encryption.key` - Your encryption key  \r\n  `Encryption.iv # Optional` - Encryption initialization vector. Defaults to the character `\"\\0\"` _(Optional)_  \r\n  `Encryption.cipher # Optional` - Your encryption algorithm. Defaults to `aes-256-cbc` _(Optional)_\r\n  \r\n  Run `openssl list-cipher-commands` in the terminal to list all installed ciphers or call `OpenSSL::Cipher.ciphers` in _Ruby_, which will return an array, containing all available algorithms.\r\n\r\n  You can optionally configure both a global instance and a custom instance with a _block_:\r\n  ```ruby\r\nEncryption.config do |config|\r\nconfig.key = \"don't look at me!\"\r\nconfig.iv = \"is there a better way to initialize OpenSSL?\"\r\nconfig.cipher = \"camellia-128-ecb\" # if you feel adventurous\r\nend\r\n  ```\r\n\r\nAsymmetric encryption (public/private key encryption)\r\n-----------------------------------------------------\r\nThe `encryption` gem also provides easier syntax for asymmetric encryption.\r\n\r\n  Generating keypair\r\n  ------------------\r\n  ```ruby\r\nkeypair = Encryption::Keypair.new # Accepts two optional arguments size = 2048 and password = nil\r\nkeypair.public_key # Instance of Encryption::PublicKey\r\nkeypair.private_key # Instance of Encryption::PrivateKey\r\n# Or this for short\r\npublic_key, private_key = Encryption::Keypair.generate(2048)\r\n\r\n# Then you can export each to string\r\nprivate_key.to_s\r\n\r\n# or to PEM format\r\nprivate_key.to_pem\r\n\r\n# and optionally encrypt is with a passphrase\r\nprivate_key.to_pem('passphrase')\r\n  ```\r\n\r\n  `Encryption::PublicKey` and `Encryption::PrivateKey`\r\n  ----------------------------------------------------\r\n  Both classes have the same methods\r\n\r\n  ```ruby\r\n# Import an existing key\r\nEncryption::PublicKey.new(filename[, password]) # From file\r\nEncryption::PublicKey.new(string[, password]) # From string\r\n\r\n# Encrypt / Decrypt data\r\npublic_key = Encryption::PublicKey.new(\"existing key\")\r\npublic_key.encrypt(\"2001: A Space Odyssey\")\r\npublic_key.decrypt(\"H3LL0ยก\")\r\n\r\n# Note that you can use both public and private keys to encrypt and decrypt data\r\n  ```\r\n\r\nHelpers\r\n-------\r\n  String helper\r\n  -------------\r\n  The gem adds the `encrypt` and `decrypt` methods to the `String` class.\r\n  You can use them as follows:\r\n  ```ruby\r\n# With the global Encryption instance\r\n\"Hello\".encrypt\r\n\"Hello\".encrypt!\r\n\"h3LL0\".decrypt\r\n\"h3LL0\".decrypt!\r\n\r\n# With custom settings (and custom encryptor instance)\r\n\"Contact\".encrypt(key: 'encryption key', iv: 'initialization vector', cipher: 'encryption algorithm', encode: true)\r\n\r\n# Note the encode option which will result in a base64 encoded string\r\n\r\n\"3NcPyptED\".decrypt!(encoded: true) # Will decrypt an encoded string\r\n\r\n# Or with a custom encryptor\r\nencryptor = Encryption::Symmetric.new\r\nencryptor.key = 'random string'\r\n\"Interstate 60\".encrypt(encryptor: encryptor)\r\n  ```\r\n\r\nLicense\r\n-------\r\nThis gem is distributed under The MIT License.\r\n\r\nAuthor\r\n------\r\nItay Grudev \r\n&nbsp; ![Itay Grudev](http://safemail.justlikeed.net/e/a5307c0c2dd405f756cab9f4c76cd63a.png)\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}